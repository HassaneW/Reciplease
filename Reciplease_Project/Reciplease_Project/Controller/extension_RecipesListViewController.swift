//
//  BaseViewController.swift
//  Reciplease_Project
//
//  Created by Wandianga hassane on 11/11/2020.
//  Copyright ¬© 2020 Wandianga. All rights reserved.
//

import Foundation


    extension RecipesListViewController {
        func add(_ child: RecipesListViewController) {
            addChild(child)
            view.addSubview(child.view)
            child.didMove(toParent: self)
        }

        func remove() {
            // Just to be safe, we check that this view controller
            // is actually added to a parent before removing it.
            guard parent != nil else {
                return
            }

            willMove(toParent: nil)
            view.removeFromSuperview()
            removeFromParent()
        }
    }

//Utilisation d'un contr√¥leur de vue enfant

//class ListViewController: UITableViewController {
//    override func viewWillAppear(_ animated: Bool) {
//        super.viewWillAppear(animated)
//        loadItems()
//    }
//
//    private func loadItems() {
//        let loadingViewController = LoadingViewController()
//        add(loadingViewController)
//
//        dataLoader.loadItems { [weak self] result in
//            loadingViewController.remove()
//            self?.handle(result)
//        }
//    }
//}

/*
 Contr√¥leurs de vue enfant
 
 1) Pour ajouter un contr√¥leur de vue en tant qu'enfant, nous utilisons les trois appels d'API suivants:
 
 let parent = UIViewController()
 let child = UIViewController()

 // First, add the view of the child to the view of the parent
 parent.view.addSubview(child.view)

 // Then, add the child to the parent
 parent.addChild(child)

 // Finally, notify the child that it was moved to a parent
 child.didMove(toParent: parent)
 
 2) Et pour supprimer un enfant une fois ajout√© √† un parent, nous utilisons les trois appels suivants:
 
 // First, notify the child that it‚Äôs about to be removed
 child.willMove(toParent: nil)

 // Then, remove the child from its parent
 child.removeFromParent()

 // Finally, remove the child‚Äôs view from the parent‚Äôs
 child.view.removeFromSuperview()
 
 3) Une solution √† ce probl√®me consiste √† ajouter une extension UIViewControllerqui regroupe toutes les √©tapes n√©cessaires pour ajouter ou supprimer un contr√¥leur de vue enfant en deux m√©thodes faciles √† utiliser, comme celle-ci:
 
 extension UIViewController {
     func add(_ child: UIViewController) {
         addChild(child)
         view.addSubview(child.view)
         child.didMove(toParent: self)
     }

     func remove() {
         // Just to be safe, we check that this view controller
         // is actually added to a parent before removing it.
         guard parent != nil else {
             return
         }

         willMove(toParent: nil)
         view.removeFromSuperview()
         removeFromParent()
     }
 }
 
 
 */


/*
 
 Les contr√¥leurs de vue enfants sont particuli√®rement utiles pour les fonctionnalit√©s de l'interface utilisateur que nous souhaitons r√©utiliser dans un projet. Par exemple, nous pourrions vouloir afficher une vue de chargement lorsque nous chargeons le contenu de chaque √©cran - et cela peut √™tre facilement impl√©ment√© √† l'aide d'un contr√¥leur de vue enfant, qui peut ensuite √™tre simplement ajout√© si n√©cessaire.

 Pour ce faire, cr√©ons d'abord un LoadingViewControllerqui affiche une fl√®che de chargement au centre de sa vue, comme ceci:
 
 class LoadingViewController: UIViewController {
     override func viewDidLoad() {
         super.viewDidLoad()

         let spinner = UIActivityIndicatorView(style: .gray)
         spinner.translatesAutoresizingMaskIntoConstraints = false
         spinner.startAnimating()
         view.addSubview(spinner)

         // Center our spinner both horizontally & vertically
         NSLayoutConstraint.activate([
             spinner.centerXAnchor.constraint(equalTo: view.centerXAnchor),
             spinner.centerYAnchor.constraint(equalTo: view.centerYAnchor)
         ])
     }
 }
 
 Ensuite, lorsque nous - dans l'un de nos contr√¥leurs de vue de contenu - commen√ßons √† charger du contenu, nous pouvons maintenant simplement ajouter notre nouveau en LoadingViewControllertant qu'enfant pour afficher un spinner de chargement, puis le supprimer une fois que nous avons termin√©:
 
 class ContentViewController: UIViewController {
     private let loader = ContentLoader()

     func loadContent() {
         let loadingVC = LoadingViewController()
         add(loadingVC)

         loader.load { [weak self] content in
             loadingVC.remove()
             self?.render(content)
         }
     }
 }
 
 Plut√¥t cool! üëç Mais la question est la suivante: pourquoi se donner la peine d'impl√©menter un contr√¥leur de vue pour quelque chose comme un spinner de chargement, au lieu d'utiliser simplement un simple UIView? Voici quelques raisons courantes:

 Un contr√¥leur de vue a acc√®s √† des √©v√©nements tels que viewDidLoadet viewWillAppear, m√™me lorsqu'il est utilis√© en tant qu'enfant, ce qui peut √™tre vraiment utile pour de nombreux types de code d'interface utilisateur.
 Un contr√¥leur de vue est plus autonome et peut √† la fois inclure la logique requise pour piloter son interface utilisateur, ainsi que l'interface utilisateur elle-m√™me.
 Lorsqu'il est ajout√© en tant qu'enfant, un contr√¥leur de vue remplit automatiquement l'√©cran, r√©duisant ainsi le besoin de code de disposition suppl√©mentaire pour les interfaces utilisateur plein √©cran.
 Lorsqu'un √©l√©ment d'interface utilisateur est impl√©ment√© en tant que contr√¥leur de vue, il peut √™tre utilis√© dans de nombreux contextes diff√©rents, y compris √† la fois √™tre pouss√© sur un contr√¥leur de navigation et incorpor√© en tant qu'enfant.
 Bien s√ªr, cela ne signifie pas n√©cessairement que toutes les interfaces utilisateur doivent √™tre impl√©ment√©es √† l'aide de contr√¥leurs de vue enfants - mais c'est un bon outil √† garder √† l'esprit afin de cr√©er des interfaces utilisateur de mani√®re plus modulaire.
 
 */
